/*
 * Url Manager Service
 *
 * The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using urlmanager.Client;
using urlmanager.Api;
// uncomment below to import models
//using urlmanager.Model;

namespace urlmanager.Test.Api
{
    /// <summary>
    ///  Class for testing BasicOperationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BasicOperationsApiTests : IDisposable
    {
        private BasicOperationsApi instance;

        public BasicOperationsApiTests()
        {
            instance = new BasicOperationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BasicOperationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BasicOperationsApi
            //Assert.IsType<BasicOperationsApi>(instance);
        }

        /// <summary>
        /// Test UrlManagerChangeUrlRewriteRequestPath
        /// </summary>
        [Fact]
        public void UrlManagerChangeUrlRewriteRequestPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerChangeUrlRewriteRequestPathRequest body = null;
            //var response = instance.UrlManagerChangeUrlRewriteRequestPath(body);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UrlManagerChangeUrlRewriteRequestPath2
        /// </summary>
        [Fact]
        public void UrlManagerChangeUrlRewriteRequestPath2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerChangeUrlRewriteRequestPathRequest body = null;
            //var response = instance.UrlManagerChangeUrlRewriteRequestPath2(body);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UrlManagerCreateUrlRewrite
        /// </summary>
        [Fact]
        public void UrlManagerCreateUrlRewriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerCreateUrlRewriteRequest body = null;
            //var response = instance.UrlManagerCreateUrlRewrite(body);
            //Assert.IsType<UrlmanagerUrlRewrite>(response);
        }

        /// <summary>
        /// Test UrlManagerCreateUrlRewrite2
        /// </summary>
        [Fact]
        public void UrlManagerCreateUrlRewrite2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerCreateUrlRewriteRequest body = null;
            //var response = instance.UrlManagerCreateUrlRewrite2(body);
            //Assert.IsType<UrlmanagerUrlRewrite>(response);
        }

        /// <summary>
        /// Test UrlManagerDeleteUrlRewrite
        /// </summary>
        [Fact]
        public void UrlManagerDeleteUrlRewriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerDeleteUrlRewriteRequest body = null;
            //var response = instance.UrlManagerDeleteUrlRewrite(body);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UrlManagerDeleteUrlRewrite2
        /// </summary>
        [Fact]
        public void UrlManagerDeleteUrlRewrite2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerDeleteUrlRewriteRequest body = null;
            //var response = instance.UrlManagerDeleteUrlRewrite2(body);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UrlManagerGetUrlRewrite
        /// </summary>
        [Fact]
        public void UrlManagerGetUrlRewriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerGetUrlRewriteRequest body = null;
            //var response = instance.UrlManagerGetUrlRewrite(body);
            //Assert.IsType<UrlmanagerUrlRewrite>(response);
        }

        /// <summary>
        /// Test UrlManagerGetUrlRewrite2
        /// </summary>
        [Fact]
        public void UrlManagerGetUrlRewrite2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerGetUrlRewriteRequest body = null;
            //var response = instance.UrlManagerGetUrlRewrite2(body);
            //Assert.IsType<UrlmanagerUrlRewrite>(response);
        }

        /// <summary>
        /// Test UrlManagerListUrlRewrites
        /// </summary>
        [Fact]
        public void UrlManagerListUrlRewritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerListUrlRewritesRequest body = null;
            //var response = instance.UrlManagerListUrlRewrites(body);
            //Assert.IsType<UrlmanagerListUrlRewritesResponse>(response);
        }

        /// <summary>
        /// Test UrlManagerListUrlRewrites2
        /// </summary>
        [Fact]
        public void UrlManagerListUrlRewrites2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerListUrlRewritesRequest body = null;
            //var response = instance.UrlManagerListUrlRewrites2(body);
            //Assert.IsType<UrlmanagerListUrlRewritesResponse>(response);
        }

        /// <summary>
        /// Test UrlManagerListUrlRewritesByTargetPaths
        /// </summary>
        [Fact]
        public void UrlManagerListUrlRewritesByTargetPathsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerListUrlRewritesByTargetPathsRequest body = null;
            //var response = instance.UrlManagerListUrlRewritesByTargetPaths(body);
            //Assert.IsType<UrlmanagerListUrlRewritesByTargetPathsRequest>(response);
        }

        /// <summary>
        /// Test UrlManagerListUrlRewritesByTargetPaths2
        /// </summary>
        [Fact]
        public void UrlManagerListUrlRewritesByTargetPaths2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerListUrlRewritesByTargetPathsRequest body = null;
            //var response = instance.UrlManagerListUrlRewritesByTargetPaths2(body);
            //Assert.IsType<UrlmanagerListUrlRewritesByTargetPathsRequest>(response);
        }

        /// <summary>
        /// Test UrlManagerResolveUrlRewrite
        /// </summary>
        [Fact]
        public void UrlManagerResolveUrlRewriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerResolveUrlRewriteRequest body = null;
            //var response = instance.UrlManagerResolveUrlRewrite(body);
            //Assert.IsType<UrlmanagerUrlRewrite>(response);
        }

        /// <summary>
        /// Test UrlManagerResolveUrlRewrite2
        /// </summary>
        [Fact]
        public void UrlManagerResolveUrlRewrite2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UrlmanagerResolveUrlRewriteRequest body = null;
            //var response = instance.UrlManagerResolveUrlRewrite2(body);
            //Assert.IsType<UrlmanagerUrlRewrite>(response);
        }
    }
}
