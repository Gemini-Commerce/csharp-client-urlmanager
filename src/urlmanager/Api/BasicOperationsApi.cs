/*
 * Url Manager Service
 *
 * The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using urlmanager.Client;
using urlmanager.Client.Auth;
using urlmanager.Model;

namespace urlmanager.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UrlManagerChangeUrlRewriteRequestPath(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0);

        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UrlManagerChangeUrlRewriteRequestPathWithHttpInfo(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0);
        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UrlManagerChangeUrlRewriteRequestPath2(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0);

        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UrlManagerChangeUrlRewriteRequestPath2WithHttpInfo(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        UrlmanagerUrlRewrite UrlManagerCreateUrlRewrite(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        ApiResponse<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewriteWithHttpInfo(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        UrlmanagerUrlRewrite UrlManagerCreateUrlRewrite2(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        ApiResponse<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewrite2WithHttpInfo(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UrlManagerDeleteUrlRewrite(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UrlManagerDeleteUrlRewriteWithHttpInfo(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UrlManagerDeleteUrlRewrite2(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UrlManagerDeleteUrlRewrite2WithHttpInfo(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        UrlmanagerUrlRewrite UrlManagerGetUrlRewrite(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        ApiResponse<UrlmanagerUrlRewrite> UrlManagerGetUrlRewriteWithHttpInfo(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        UrlmanagerUrlRewrite UrlManagerGetUrlRewrite2(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        ApiResponse<UrlmanagerUrlRewrite> UrlManagerGetUrlRewrite2WithHttpInfo(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0);
        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesResponse</returns>
        UrlmanagerListUrlRewritesResponse UrlManagerListUrlRewrites(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesResponse</returns>
        ApiResponse<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewritesWithHttpInfo(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0);
        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesResponse</returns>
        UrlmanagerListUrlRewritesResponse UrlManagerListUrlRewrites2(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesResponse</returns>
        ApiResponse<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewrites2WithHttpInfo(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0);
        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        UrlmanagerListUrlRewritesByTargetPathsRequest UrlManagerListUrlRewritesByTargetPaths(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPathsWithHttpInfo(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0);
        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        UrlmanagerListUrlRewritesByTargetPathsRequest UrlManagerListUrlRewritesByTargetPaths2(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPaths2WithHttpInfo(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0);
        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        UrlmanagerUrlRewrite UrlManagerResolveUrlRewrite(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        ApiResponse<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewriteWithHttpInfo(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0);
        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        UrlmanagerUrlRewrite UrlManagerResolveUrlRewrite2(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        ApiResponse<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewrite2WithHttpInfo(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UrlManagerChangeUrlRewriteRequestPathAsync(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UrlManagerChangeUrlRewriteRequestPathWithHttpInfoAsync(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UrlManagerChangeUrlRewriteRequestPath2Async(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Change Url Rewrite Request Path
        /// </summary>
        /// <remarks>
        /// Modify the request path of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UrlManagerChangeUrlRewriteRequestPath2WithHttpInfoAsync(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewriteAsync(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerUrlRewrite>> UrlManagerCreateUrlRewriteWithHttpInfoAsync(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewrite2Async(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Url Rewrite
        /// </summary>
        /// <remarks>
        /// Create a new URL rewrite configuration with customizable rules.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerUrlRewrite>> UrlManagerCreateUrlRewrite2WithHttpInfoAsync(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UrlManagerDeleteUrlRewriteAsync(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UrlManagerDeleteUrlRewriteWithHttpInfoAsync(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UrlManagerDeleteUrlRewrite2Async(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Url Rewrite
        /// </summary>
        /// <remarks>
        /// Delete an existing URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UrlManagerDeleteUrlRewrite2WithHttpInfoAsync(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerGetUrlRewriteAsync(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerUrlRewrite>> UrlManagerGetUrlRewriteWithHttpInfoAsync(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerGetUrlRewrite2Async(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Url Rewrite
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific URL rewrite configuration.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerUrlRewrite>> UrlManagerGetUrlRewrite2WithHttpInfoAsync(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesResponse</returns>
        System.Threading.Tasks.Task<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewritesAsync(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerListUrlRewritesResponse>> UrlManagerListUrlRewritesWithHttpInfoAsync(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesResponse</returns>
        System.Threading.Tasks.Task<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewrites2Async(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Url Rewrites
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all URL rewrite configurations in your application.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerListUrlRewritesResponse>> UrlManagerListUrlRewrites2WithHttpInfoAsync(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        System.Threading.Tasks.Task<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPathsAsync(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesByTargetPathsRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest>> UrlManagerListUrlRewritesByTargetPathsWithHttpInfoAsync(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        System.Threading.Tasks.Task<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPaths2Async(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Url Rewrites By Target Paths
        /// </summary>
        /// <remarks>
        /// Retrieve URL rewrite configurations based on target paths.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesByTargetPathsRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest>> UrlManagerListUrlRewritesByTargetPaths2WithHttpInfoAsync(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewriteAsync(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerUrlRewrite>> UrlManagerResolveUrlRewriteWithHttpInfoAsync(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewrite2Async(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Resolve Url Rewrite
        /// </summary>
        /// <remarks>
        /// Resolve and retrieve the rewritten URL for a given input URL.
        /// </remarks>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlmanagerUrlRewrite>> UrlManagerResolveUrlRewrite2WithHttpInfoAsync(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApi : IBasicOperationsApiSync, IBasicOperationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasicOperationsApi : IBasicOperationsApi
    {
        private urlmanager.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicOperationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicOperationsApi(string basePath)
        {
            this.Configuration = urlmanager.Client.Configuration.MergeConfigurations(
                urlmanager.Client.GlobalConfiguration.Instance,
                new urlmanager.Client.Configuration { BasePath = basePath }
            );
            this.Client = new urlmanager.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new urlmanager.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = urlmanager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasicOperationsApi(urlmanager.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = urlmanager.Client.Configuration.MergeConfigurations(
                urlmanager.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new urlmanager.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new urlmanager.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = urlmanager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasicOperationsApi(urlmanager.Client.ISynchronousClient client, urlmanager.Client.IAsynchronousClient asyncClient, urlmanager.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = urlmanager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public urlmanager.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public urlmanager.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public urlmanager.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public urlmanager.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UrlManagerChangeUrlRewriteRequestPath(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = UrlManagerChangeUrlRewriteRequestPathWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public urlmanager.Client.ApiResponse<Object> UrlManagerChangeUrlRewriteRequestPathWithHttpInfo(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerChangeUrlRewriteRequestPath");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerChangeUrlRewriteRequestPath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/urlmanager/change_url_rewrite_request_path", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerChangeUrlRewriteRequestPath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UrlManagerChangeUrlRewriteRequestPathAsync(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = await UrlManagerChangeUrlRewriteRequestPathWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<Object>> UrlManagerChangeUrlRewriteRequestPathWithHttpInfoAsync(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerChangeUrlRewriteRequestPath");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerChangeUrlRewriteRequestPath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/urlmanager/change_url_rewrite_request_path", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerChangeUrlRewriteRequestPath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UrlManagerChangeUrlRewriteRequestPath2(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = UrlManagerChangeUrlRewriteRequestPath2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public urlmanager.Client.ApiResponse<Object> UrlManagerChangeUrlRewriteRequestPath2WithHttpInfo(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerChangeUrlRewriteRequestPath2");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerChangeUrlRewriteRequestPath2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/urlmanager.UrlManager/ChangeUrlRewriteRequestPath", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerChangeUrlRewriteRequestPath2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UrlManagerChangeUrlRewriteRequestPath2Async(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = await UrlManagerChangeUrlRewriteRequestPath2WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Url Rewrite Request Path Modify the request path of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<Object>> UrlManagerChangeUrlRewriteRequestPath2WithHttpInfoAsync(UrlmanagerChangeUrlRewriteRequestPathRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerChangeUrlRewriteRequestPath2");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerChangeUrlRewriteRequestPath2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/urlmanager.UrlManager/ChangeUrlRewriteRequestPath", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerChangeUrlRewriteRequestPath2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        public UrlmanagerUrlRewrite UrlManagerCreateUrlRewrite(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = UrlManagerCreateUrlRewriteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewriteWithHttpInfo(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerCreateUrlRewrite");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerCreateUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerUrlRewrite>("/urlmanager/create_url_rewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerCreateUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        public async System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewriteAsync(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = await UrlManagerCreateUrlRewriteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite>> UrlManagerCreateUrlRewriteWithHttpInfoAsync(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerCreateUrlRewrite");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerCreateUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerUrlRewrite>("/urlmanager/create_url_rewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerCreateUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        public UrlmanagerUrlRewrite UrlManagerCreateUrlRewrite2(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = UrlManagerCreateUrlRewrite2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewrite2WithHttpInfo(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerCreateUrlRewrite2");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerCreateUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerUrlRewrite>("/urlmanager.UrlManager/CreateUrlRewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerCreateUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        public async System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerCreateUrlRewrite2Async(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = await UrlManagerCreateUrlRewrite2WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Url Rewrite Create a new URL rewrite configuration with customizable rules.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite>> UrlManagerCreateUrlRewrite2WithHttpInfoAsync(UrlmanagerCreateUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerCreateUrlRewrite2");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerCreateUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerUrlRewrite>("/urlmanager.UrlManager/CreateUrlRewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerCreateUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UrlManagerDeleteUrlRewrite(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = UrlManagerDeleteUrlRewriteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public urlmanager.Client.ApiResponse<Object> UrlManagerDeleteUrlRewriteWithHttpInfo(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerDeleteUrlRewrite");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerDeleteUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/urlmanager/delete_url_rewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerDeleteUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UrlManagerDeleteUrlRewriteAsync(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = await UrlManagerDeleteUrlRewriteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<Object>> UrlManagerDeleteUrlRewriteWithHttpInfoAsync(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerDeleteUrlRewrite");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerDeleteUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/urlmanager/delete_url_rewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerDeleteUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UrlManagerDeleteUrlRewrite2(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = UrlManagerDeleteUrlRewrite2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public urlmanager.Client.ApiResponse<Object> UrlManagerDeleteUrlRewrite2WithHttpInfo(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerDeleteUrlRewrite2");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerDeleteUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/urlmanager.UrlManager/DeleteUrlRewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerDeleteUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UrlManagerDeleteUrlRewrite2Async(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<Object> localVarResponse = await UrlManagerDeleteUrlRewrite2WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Url Rewrite Delete an existing URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<Object>> UrlManagerDeleteUrlRewrite2WithHttpInfoAsync(UrlmanagerDeleteUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerDeleteUrlRewrite2");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerDeleteUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/urlmanager.UrlManager/DeleteUrlRewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerDeleteUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        public UrlmanagerUrlRewrite UrlManagerGetUrlRewrite(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = UrlManagerGetUrlRewriteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> UrlManagerGetUrlRewriteWithHttpInfo(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerGetUrlRewrite");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerGetUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerUrlRewrite>("/urlmanager/get_url_rewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerGetUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        public async System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerGetUrlRewriteAsync(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = await UrlManagerGetUrlRewriteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite>> UrlManagerGetUrlRewriteWithHttpInfoAsync(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerGetUrlRewrite");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerGetUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerUrlRewrite>("/urlmanager/get_url_rewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerGetUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        public UrlmanagerUrlRewrite UrlManagerGetUrlRewrite2(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = UrlManagerGetUrlRewrite2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> UrlManagerGetUrlRewrite2WithHttpInfo(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerGetUrlRewrite2");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerGetUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerUrlRewrite>("/urlmanager.UrlManager/GetUrlRewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerGetUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        public async System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerGetUrlRewrite2Async(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = await UrlManagerGetUrlRewrite2WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Url Rewrite Retrieve the details of a specific URL rewrite configuration.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite>> UrlManagerGetUrlRewrite2WithHttpInfoAsync(UrlmanagerGetUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerGetUrlRewrite2");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerGetUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerUrlRewrite>("/urlmanager.UrlManager/GetUrlRewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerGetUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesResponse</returns>
        public UrlmanagerListUrlRewritesResponse UrlManagerListUrlRewrites(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse> localVarResponse = UrlManagerListUrlRewritesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesResponse</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewritesWithHttpInfo(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewrites");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewrites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerListUrlRewritesResponse>("/urlmanager/list_url_rewrites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewrites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesResponse</returns>
        public async System.Threading.Tasks.Task<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewritesAsync(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse> localVarResponse = await UrlManagerListUrlRewritesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesResponse)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse>> UrlManagerListUrlRewritesWithHttpInfoAsync(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewrites");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewrites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerListUrlRewritesResponse>("/urlmanager/list_url_rewrites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewrites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesResponse</returns>
        public UrlmanagerListUrlRewritesResponse UrlManagerListUrlRewrites2(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse> localVarResponse = UrlManagerListUrlRewrites2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesResponse</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewrites2WithHttpInfo(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewrites2");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewrites2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerListUrlRewritesResponse>("/urlmanager.UrlManager/ListUrlRewrites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewrites2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesResponse</returns>
        public async System.Threading.Tasks.Task<UrlmanagerListUrlRewritesResponse> UrlManagerListUrlRewrites2Async(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse> localVarResponse = await UrlManagerListUrlRewrites2WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites Retrieve a list of all URL rewrite configurations in your application.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesResponse)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesResponse>> UrlManagerListUrlRewrites2WithHttpInfoAsync(UrlmanagerListUrlRewritesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewrites2");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewrites2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerListUrlRewritesResponse>("/urlmanager.UrlManager/ListUrlRewrites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewrites2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        public UrlmanagerListUrlRewritesByTargetPathsRequest UrlManagerListUrlRewritesByTargetPaths(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> localVarResponse = UrlManagerListUrlRewritesByTargetPathsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPathsWithHttpInfo(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewritesByTargetPaths");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewritesByTargetPaths";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerListUrlRewritesByTargetPathsRequest>("/urlmanager/list_url_rewrites_by_target_paths", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewritesByTargetPaths", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        public async System.Threading.Tasks.Task<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPathsAsync(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> localVarResponse = await UrlManagerListUrlRewritesByTargetPathsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesByTargetPathsRequest)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest>> UrlManagerListUrlRewritesByTargetPathsWithHttpInfoAsync(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewritesByTargetPaths");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewritesByTargetPaths";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerListUrlRewritesByTargetPathsRequest>("/urlmanager/list_url_rewrites_by_target_paths", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewritesByTargetPaths", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        public UrlmanagerListUrlRewritesByTargetPathsRequest UrlManagerListUrlRewritesByTargetPaths2(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> localVarResponse = UrlManagerListUrlRewritesByTargetPaths2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPaths2WithHttpInfo(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewritesByTargetPaths2");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewritesByTargetPaths2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerListUrlRewritesByTargetPathsRequest>("/urlmanager.UrlManager/ListUrlRewritesByTargetPaths", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewritesByTargetPaths2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerListUrlRewritesByTargetPathsRequest</returns>
        public async System.Threading.Tasks.Task<UrlmanagerListUrlRewritesByTargetPathsRequest> UrlManagerListUrlRewritesByTargetPaths2Async(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest> localVarResponse = await UrlManagerListUrlRewritesByTargetPaths2WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Url Rewrites By Target Paths Retrieve URL rewrite configurations based on target paths.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerListUrlRewritesByTargetPathsRequest)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerListUrlRewritesByTargetPathsRequest>> UrlManagerListUrlRewritesByTargetPaths2WithHttpInfoAsync(UrlmanagerListUrlRewritesByTargetPathsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerListUrlRewritesByTargetPaths2");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerListUrlRewritesByTargetPaths2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerListUrlRewritesByTargetPathsRequest>("/urlmanager.UrlManager/ListUrlRewritesByTargetPaths", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerListUrlRewritesByTargetPaths2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        public UrlmanagerUrlRewrite UrlManagerResolveUrlRewrite(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = UrlManagerResolveUrlRewriteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewriteWithHttpInfo(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerResolveUrlRewrite");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerResolveUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerUrlRewrite>("/urlmanager/resolve_url_rewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerResolveUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        public async System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewriteAsync(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = await UrlManagerResolveUrlRewriteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite>> UrlManagerResolveUrlRewriteWithHttpInfoAsync(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerResolveUrlRewrite");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerResolveUrlRewrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerUrlRewrite>("/urlmanager/resolve_url_rewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerResolveUrlRewrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlmanagerUrlRewrite</returns>
        public UrlmanagerUrlRewrite UrlManagerResolveUrlRewrite2(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0)
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = UrlManagerResolveUrlRewrite2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlmanagerUrlRewrite</returns>
        public urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewrite2WithHttpInfo(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerResolveUrlRewrite2");
            }

            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerResolveUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlmanagerUrlRewrite>("/urlmanager.UrlManager/ResolveUrlRewrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerResolveUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlmanagerUrlRewrite</returns>
        public async System.Threading.Tasks.Task<UrlmanagerUrlRewrite> UrlManagerResolveUrlRewrite2Async(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite> localVarResponse = await UrlManagerResolveUrlRewrite2WithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve Url Rewrite Resolve and retrieve the rewritten URL for a given input URL.
        /// </summary>
        /// <exception cref="urlmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlmanagerUrlRewrite)</returns>
        public async System.Threading.Tasks.Task<urlmanager.Client.ApiResponse<UrlmanagerUrlRewrite>> UrlManagerResolveUrlRewrite2WithHttpInfoAsync(UrlmanagerResolveUrlRewriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new urlmanager.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UrlManagerResolveUrlRewrite2");
            }


            urlmanager.Client.RequestOptions localVarRequestOptions = new urlmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = urlmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = urlmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UrlManagerResolveUrlRewrite2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlmanagerUrlRewrite>("/urlmanager.UrlManager/ResolveUrlRewrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UrlManagerResolveUrlRewrite2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
